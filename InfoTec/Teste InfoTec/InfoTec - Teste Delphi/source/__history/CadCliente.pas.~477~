unit CadCliente;

{
Rafael Hassegawa - Teste prático
rafaelmch@gmail.com
(31)99886-6863
}

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Param,
  FireDAC.Stan.Error,
  FireDAC.DatS,
  FireDAC.Phys.Intf,
  FireDAC.DApt.Intf,
  FireDAC.Stan.Async,
  FireDAC.DApt,
  Vcl.ExtCtrls,
  Data.DB,
  Vcl.StdCtrls,
  Vcl.Mask,
  Vcl.DBCtrls,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, REST.Types, REST.Response.Adapter, REST.Client,
  Data.Bind.Components, Data.Bind.ObjectScope ;

type
  TfCadCliente = class(TForm)
    Panel1: TPanel;
    DBNavigator1: TDBNavigator;
    btnNovo: TButton;
    btnCancelar: TButton;
    btnSalvar: TButton;
    lblRegistros: TLabel;
    Panel3: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label12: TLabel;
    Label14: TLabel;
    edNome: TDBEdit;
    edNascimento: TDBEdit;
    edTelefone: TDBEdit;
    edEmail: TDBEdit;
    edInscFiscal: TDBEdit;
    qClientes: TFDQuery;
    qClientesID_CLIENTE: TIntegerField;
    qClientesNOME: TStringField;
    qClientesNASCIMENTO: TDateField;
    qClientesTELEFONE: TStringField;
    qClientesEMAIL: TStringField;
    qClientesEND_TIPO_LOGRADOURO: TStringField;
    qClientesEND_NOME_LOGRADOURO: TStringField;
    qClientesEND_NUMERO: TStringField;
    qClientesEND_COMPLEMENTO: TStringField;
    qClientesEND_BAIRRO: TStringField;
    qClientesEND_CIDADE: TStringField;
    qClientesEND_UF: TStringField;
    qClientesINSCRICAO_FISCAL: TStringField;
    qClientesEND_CEP: TStringField;
    qClientesPESSOA: TStringField;
    dsqClientes: TDataSource;
    GroupBox1: TGroupBox;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label13: TLabel;
    btnLocCEP: TButton;
    btnCSV: TButton;
    btnEnviarEmail: TButton;
    edTipoLogradouro: TDBEdit;
    edLogradouro: TDBEdit;
    edNumero: TDBEdit;
    edComplemento: TDBEdit;
    edBairro: TDBEdit;
    edCidade: TDBEdit;
    edUF: TDBEdit;
    edCEP: TDBEdit;
    qClientesID_USUARIO: TIntegerField;
    edId: TDBEdit;
    edTipoPessoa: TDBEdit;
    rgTipoInscricao: TRadioGroup;
    procedure btnNovoClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnSalvarClick(Sender: TObject);
    procedure qClientesEMAILValidate(Sender: TField);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure qClientesINSCRICAO_FISCALValidate(Sender: TField);
    procedure FormShow(Sender: TObject);
    procedure btnLocCEPClick(Sender: TObject);
    procedure DBNavigator1Click(Sender: TObject; Button: TNavigateBtn);
    procedure edNascimentoExit(Sender: TObject);
    procedure btnCSVClick(Sender: TObject);
    procedure btnEnviarEmailClick(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure qClientesNASCIMENTOValidate(Sender: TField);
    procedure rgTipoInscricaoClick(Sender: TObject);
    procedure edInscFiscalExit(Sender: TObject);
  private
    { Private declarations }
    //validar campos obrigatórios da tela
    function validarCamposObrigatorios() : boolean;
    //limpa os campos da tela
    procedure limparCampos();
  public
    { Public declarations }
  end;

var
  fCadCliente: TfCadCliente;

implementation

{$R *.dfm}

uses
  Main,
  System.RegularExpressions,
  InscricaoFiscal,
  uDados,
  uEnviaEmail,
  login,
  uFuncoes;

//Gerar arquivo CSV com os registros da tabela CLIENTES
procedure TfCadCliente.btnCSVClick(Sender: TObject);
const
  Delimiter: Char = ';';
  Enclosure: Char = '"';
var
  List: TStringList;
  ls_diretorioEXE, S: String;
  I: Integer;
  function EscapeString(s: string): string;
  var
    i: Integer;
  begin
    Result := StringReplace(s,Enclosure,Enclosure+Enclosure,[rfReplaceAll]);
    if (Pos(Delimiter,s) > 0) OR (Pos(Enclosure,s) > 0) then  // Comment this line for enclosure in every fields
        Result := Enclosure+Result+Enclosure;
  end;
  procedure AddHeader;
  var
    I: Integer;
  begin
    S := '';
    for I := 0 to qClientes.FieldCount - 1 do begin
      if S > '' then
        S := S + Delimiter;
      S := S + EscapeString(qClientes.Fields[I].FieldName);
    end;
    List.Add(S);
  end;
  procedure AddRecord;
  var
    I: Integer;
  begin
    S := '';
    for I := 0 to qClientes.FieldCount - 1 do begin
      if S > '' then
        S := S + Delimiter;
      S := S + EscapeString(qClientes.Fields[I].AsString);
    end;
    List.Add(S);
  end;
begin
  List := TStringList.Create;
  ls_diretorioEXE := ExtractFileDir(Application.ExeName);
  try
    qClientes.DisableControls;
    qClientes.First;
    AddHeader;
    while not qClientes.Eof do begin
      AddRecord;
      qClientes.Next;
    end;
  finally
    List.SaveToFile(ls_diretorioEXE + '\Clientes.csv');
    qClientes.First;
    qClientes.EnableControls;
    List.Free;
    ShowMessage('Arquivo gerado com sucesso em: ' + ls_diretorioEXE + '\Clientes.csv');
  end;
end;

//Envio de e-mail utilizando o Gmail
procedure TfCadCliente.btnEnviarEmailClick(Sender: TObject);
begin
  Application.CreateForm(TfrmEnviaEmail,frmEnviaEmail);
  frmEnviaEmail.edPara.Text := edEmail.Text;
  frmEnviaEmail.ShowModal;
end;

//Localizar o CEP
procedure TfCadCliente.btnLocCEPClick(Sender: TObject);
var
  li_count : Integer;
  ls_CEP : String;
begin
  //buscar o CEP - utilizar https://viacep.com.br/ws/
  ls_CEP := StringReplace(edCEP.Text, '-', '', [rfReplaceAll]);

  frmDados.RESTRequest1.Resource := edCEP.Text + '/json';
  frmDados.RESTRequest1.Execute;

  if frmDados.RESTRequest1.Response.StatusCode = 200 then
  begin
    if frmDados.RESTRequest1.Response.Content.IndexOf('erro') > 0 then
    begin
      ShowMessage('Atenção! CEP não localizado!');
    end
    else
    begin
      with frmDados.CEPTable do
      begin
        edLogradouro.Text := FieldByName('logradouro').AsString;
        edBairro.Text := FieldByName('bairro').AsString;
        edCidade.Text := FieldByName('localidade').AsString;
        edUF.Text := FieldByName('uf').AsString;
        edCEP.Text := FieldByName('cep').AsString;
      end;
    end;
  end;

  //vou setar o foco no tipo de logradouro, pois o campo é obrigatório
  try
    edTipoLogradouro.SetFocus;
  except

  end;

end;

procedure TfCadCliente.btnNovoClick(Sender: TObject);
var
  ls_sql : String;
begin
  rgTipoInscricao.ItemIndex := 0;
  edTipoPessoa.Text := 'F';
  qClientesINSCRICAO_FISCAL.EditMask := '999.999.999-99';
  lblRegistros.Caption := '';

  qClientes.Append;
  try
    edNome.SetFocus;
  except

  end;

  ls_sql := 'SELECT MAX(ID_CLIENTE) + 1 AS ID_NOVO FROM CLIENTES';
  with frmDados.qGeral do
  begin
    Close;
    Sql.Clear;
    Sql.Add(ls_sql);
    Open;
  end;
  edID.Text := frmDados.qGeral.FieldByName('ID_NOVO').AsString;
end;

procedure TfCadCliente.btnCancelarClick(Sender: TObject);
begin
  qClientes.Cancel;
end;

procedure TfCadCliente.btnSalvarClick(Sender: TObject);
var
  ls_sql : String;
begin
  //se não validar campos obrigatórios, não tenta salvar
  if validarCamposObrigatorios() = false then
    Exit;

  if qClientes.State in [dsInsert] then
    qClientes.FieldByName('ID_USUARIO').AsInteger := gi_idUsuario;

  if rgTipoInscricao.ItemIndex = 0 then
    qClientes.FieldByName('PESSOA').AsString := 'F'
  else
    qCLientes.FieldByName('PESSOA').AsString := 'J';

  if qClientes.State in [dsEdit, dsInsert] then
    qClientes.Post
  else
    ShowMessage('Atenção! Tela não está em modo de inserção/edição!');

  lblRegistros.Caption := atualizarRegistrosCadastro('CLI',qClientes);
end;

procedure TfCadCliente.DBNavigator1Click(Sender: TObject; Button: TNavigateBtn);
begin
  if edTipoPessoa.Text = 'F' then
    rgTipoInscricao.ItemIndex := 0
  else if edTipoPessoa.Text = 'J' then
    rgTipoInscricao.ItemIndex := 1;

  lblRegistros.Caption := atualizarRegistrosCadastro('CLI',qClientes);
end;

procedure TfCadCliente.edNascimentoExit(Sender: TObject);
var
  ld_data : TDate;
begin
  try
    ld_data := StrToDate(edNascimento.Text);
  except
    ShowMessage('Atenção! Informe uma data válida!');
    edNascimento.Text := '__/__/____';
    edNascimento.SetFocus;
    Exit;
  end;
end;

//Validação do e-mail informado
procedure TfCadCliente.qClientesEMAILValidate(Sender: TField);
const
  EMAIL_REGEX = '^((?>[a-zA-Z\d!#$%&''*+\-/=?^_`{|}~]+\x20*|"((?=[\x01-\x7f])'
             +'[^"\\]|\\[\x01-\x7f])*"\x20*)*(?<angle><))?((?!\.)'
             +'(?>\.?[a-zA-Z\d!#$%&''*+\-/=?^_`{|}~]+)+|"((?=[\x01-\x7f])'
             +'[^"\\]|\\[\x01-\x7f])*")@(((?!-)[a-zA-Z\d\-]+(?<!-)\.)+[a-zA-Z]'
             +'{2,}|\[(((?(?<!\[)\.)(25[0-5]|2[0-4]\d|[01]?\d?\d))'
             +'{4}|[a-zA-Z\d\-]*[a-zA-Z\d]:((?=[\x01-\x7f])[^\\\[\]]|\\'
             +'[\x01-\x7f])+)\])(?(angle)>)$';
var
  rRegex: TRegex;
  bRet  : Boolean;
begin
  bRet := rRegex.IsMatch(Sender.AsString, EMAIL_REGEX);
  if not bRet then
    raise Exception.Create('e-Mail inválido!');
end;

procedure TfCadCliente.qClientesINSCRICAO_FISCALValidate(Sender: TField);
var
  oValidador: TInscricaoFiscal;
  ls_cpf, ls_cnpj : String;
begin
  oValidador := nil;

  try
    if rgTipoInscricao.ItemIndex = 0 then
    begin
      oValidador := TCPF.Create;
      ls_cpf := StringReplace(edInscFiscal.Text, '.', '', [rfReplaceAll]);
      ls_cpf := StringReplace(ls_cpf, '-', '', [rfReplaceAll]);
      if oValidador.DocumentoValido(ls_cpf) = false then
      begin
        ShowMessage('Atenção! CPF inválido!');
        edInscFiscal.SelectAll;
        edInscFiscal.SetFocus;
      end;
    end;

   if rgTipoInscricao.ItemIndex = 1 then
    begin
      oValidador := TCNPJ.Create;
      ls_cnpj := StringReplace(edInscFiscal.Text, '.', '', [rfReplaceAll]);
      ls_cnpj := StringReplace(ls_cnpj, '/', '', [rfReplaceAll]);
      ls_cnpj := StringReplace(ls_cnpj, '-', '', [rfReplaceAll]);
      if oValidador.DocumentoValido(ls_cnpj) = false then
      begin
        ShowMessage('Atenção! CNPJ inválido!');
        edInscFiscal.SelectAll;
        edInscFiscal.SetFocus;
      end;
    end;

    if not Assigned(oValidador) then
      raise Exception.Create('O tipo de inscrição não foi definido');

    if Assigned(oValidador) and not oValidador.DocumentoValido(Sender.AsString) then
      //raise Exception.Create('Documento inválido');
      Exit;
  finally
    if Assigned(oValidador) then
      oValidador.Free;
  end;
end;

procedure TfCadCliente.qClientesNASCIMENTOValidate(Sender: TField);
var
  ld_data : TDate;
begin
  try
    ld_data := StrToDate(edNascimento.Text);
  except
    ShowMessage('Atenção! Informe uma data válida!');
    edNascimento.Text := '__/__/____';
    edNascimento.SetFocus;
    Exit;
  end;
end;

procedure TfCadCliente.rgTipoInscricaoClick(Sender: TObject);
begin
  if rgTipoInscricao.ItemIndex = 0 then
  begin
    qClientesInscricao_Fiscal.EditMask := '999.999.999-99';
    edTipoPessoa.Text := 'F';

  end
  else if rgTipoInscricao.ItemIndex = 1 then
  begin
    qClientesInscricao_Fiscal.EditMask := '99.999.999/9999-99';
    edTipoPessoa.Text := 'J';
  end;

  if qClientes.State in [dsEdit, dsInsert] then
    edInscFiscal.Clear;
end;

procedure TfCadCliente.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  qClientes.Close;
  frmDados.qGeral.Close;
  fCadCliente := nil;
  Action := caFree;
end;

procedure TfCadCliente.FormCreate(Sender: TObject);
begin
  qClientes.Open;
end;

procedure TfCadCliente.FormKeyPress(Sender: TObject; var Key: Char);
begin
  //pular campo com o ENTER
  if key = #13 then
  begin
    Key:= #0;
    Perform(Wm_NextDlgCtl,0,0);
  end;
end;

procedure TfCadCliente.FormShow(Sender: TObject);
begin
  if edTipoPessoa.Text = 'F' then
    rgTipoInscricao.ItemIndex := 0
  else if edTipoPessoa.Text = 'J' then
    rgTipoInscricao.ItemIndex := 1;

  qClientesInscricao_Fiscal.EditMask := '999.999.999-99';

  lblRegistros.Caption := atualizarRegistrosCadastro('CLI',qClientes);
end;

function TfCadCliente.validarCamposObrigatorios() : boolean;
var
  li_id : Integer;
  ld_dt_nascimento : TDate;
begin
  result := true;

  if trim(edNome.Text) = '' then
  begin
    ShowMessage('Atenção! Informe o nome do cliente!');
    edNome.SetFocus;
    result := false;
    exit;
  end;

  try
    ld_dt_nascimento := StrToDate(edNascimento.Text);
  except
    ShowMessage('Atenção! Data inválida!');
    edNascimento.Text := '  /  /    ';
    edNascimento.SetFocus;
    result := false;
    Exit;
  end;

  if trim(edTelefone.Text) = '' then
  begin
    ShowMessage('Atenção! Informe o telefone do cliente!');
    edTelefone.SetFocus;
    result := false;
    exit;
  end;

  if trim(edEmail.Text) = '' then
  begin
    ShowMessage('Atenção! Informe o email do cliente!');
    edEmail.SetFocus;
    result := false;
    exit;
  end;

  if trim(edInscFiscal.Text) = '' then
  begin
    ShowMessage('Atenção! Informe a Insc Fiscal do cliente!');
    edInscFiscal.SetFocus;
    result := false;
    exit;
  end;

  if trim(edTipoLogradouro.Text) = '' then
  begin
    ShowMessage('Atenção! Informe o tipo de logradouro do cliente!');
    edTipoLogradouro.SetFocus;
    result := false;
    exit;
  end;

  if trim(edLogradouro.Text) = '' then
  begin
    ShowMessage('Atenção! Informe o logradouro do cliente!');
    edLogradouro.SetFocus;
    result := false;
    exit;
  end;

  if trim(edNumero.Text) = '' then
  begin
    ShowMessage('Atenção! Informe o número do logradouro do cliente!');
    edNumero.SetFocus;
    result := false;
    exit;
  end;

  if trim(edBairro.Text) = '' then
  begin
    ShowMessage('Atenção! Informe o bairro do cliente!');
    edBairro.SetFocus;
    result := false;
    exit;
  end;

  if trim(edCidade.Text) = '' then
  begin
    ShowMessage('Atenção! Informe a cidade do cliente!');
    edCidade.SetFocus;
    result := false;
    exit;
  end;

  if trim(edUF.Text) = '' then
  begin
    ShowMessage('Atenção! Informe a UF do cliente!');
    edUF.SetFocus;
    result := false;
    exit;
  end;

  if trim(edCEP.Text) = '' then
  begin
    ShowMessage('Atenção! Informe o CEP do cliente!');
    edCEP.SetFocus;
    result := false;
    exit;
  end;

end;

procedure TfCadCliente.limparCampos();
var
 i:integer;
begin
  edNome.Clear;
  edNascimento.Clear;
  edTelefone.Clear;
  edEmail.Clear;
  edInscFiscal.Clear;
  edTipoLogradouro.Clear;
  edLogradouro.Clear;
  edNumero.Clear;
  edComplemento.Clear;
  edBairro.Clear;
  edCidade.Clear;
  edUF.Clear;
  edCEP.Clear;
end;

end.

